type Account = record { owner : principal; subaccount : opt blob };
type ApproveArgs = record {
  from_subaccount : opt blob;
  amount : nat;
  expires_at : opt nat64;
  spender : Account;
};
type ClaimReferralArgs = record { referral_code : text };
type DeductBalanceArgs = record {
  description : text;
  caller : Account;
  amount : nat;
};
type FeeDistribution = record {
  fee : nat;
  burn_percent : nat8;
  dapp_percent : nat8;
  community_percent : nat8;
};
type LedgerError = variant {
  InvalidAccount;
  TransferError;
  InsufficientFee;
  InsufficientAllowance;
  AdminRequired;
  InsufficientPoolFunds;
  AlreadyRegistered;
  InsufficientBalance;
  InvalidPrincipal;
  UnauthorizedCaller;
  Unauthorized;
  NotAuthenticated;
  FeeProcessingError;
  VestingLocked;
  InvalidReferral;
  ArithmeticError;
};
type LogEntry = record { timestamp : nat64; details : text; event_type : text };
type PoolTransferArgs = record {
  to_principal : opt Account;
  from_pool : text;
  to_pool : opt text;
  description : text;
  amount : nat;
};
type Result = variant { Ok; Err : LedgerError };
type Result_1 = variant { Ok : text; Err : LedgerError };
type Result_2 = variant { Ok : vec LogEntry; Err : LedgerError };
type Result_3 = variant { Ok : nat; Err : LedgerError };
type TransactionEvent = record {
  to : opt Account;
  fee : opt nat;
  tx_id : blob;
  from : Account;
  timestamp : nat64;
  amount : nat;
  spender : opt Account;
  event_type : text;
};
type TransferArgs = record {
  to : Account;
  from_subaccount : opt blob;
  amount : nat;
};
type TransferFromArgs = record {
  to : Account;
  from : Account;
  amount : nat;
  spender : Account;
};
service : (text, text, nat, nat64, nat, principal) -> {
  add_trusted_principal : (principal) -> (Result);
  admin_transfer : (PoolTransferArgs) -> (Result_1);
  claim_referral : (ClaimReferralArgs) -> (Result_1);
  convert_dapp_funds_to_cycles : () -> (Result);
  deduct_from_balance : (DeductBalanceArgs) -> (Result_1);
  get_admin : () -> (principal) query;
  get_caller_principal_info : () -> (principal, bool, bool) query;
  get_community_pool_balance : () -> (nat) query;
  get_dapp_funds : () -> (nat) query;
  get_fee_distribution : () -> (FeeDistribution) query;
  get_logs_by_range : (nat64, nat64) -> (Result_2) query;
  get_logs_paginated : (nat64, nat64) -> (Result_2) query;
  get_referral_code : (Account) -> (opt text) query;
  get_reserve_pool_balance : () -> (nat) query;
  get_team_pool_balance : () -> (nat) query;
  get_total_burned : () -> (nat) query;
  get_transaction_by_id : (blob) -> (opt TransactionEvent) query;
  get_transactions : (blob, blob) -> (vec TransactionEvent) query;
  get_transactions_by_principal : (principal, blob, nat64) -> (
      vec TransactionEvent,
    ) query;
  get_trusted_principals : () -> (vec principal) query;
  icrc1_allowance : (Account, Account) -> (nat) query;
  icrc1_approve : (ApproveArgs) -> (Result_3);
  icrc1_balance_of : (Account) -> (nat) query;
  icrc1_decimals : () -> (nat8) query;
  icrc1_fee : () -> (nat) query;
  icrc1_metadata : () -> (vec record { text; text }) query;
  icrc1_name : () -> (text) query;
  icrc1_supported_standards : () -> (vec text) query;
  icrc1_symbol : () -> (text) query;
  icrc1_total_supply : () -> (nat) query;
  icrc1_transfer : (TransferArgs, opt blob) -> (Result_3);
  icrc1_transfer_from : (TransferFromArgs, opt blob) -> (Result_3);
  is_admin_bypass_enabled : () -> (bool) query;
  is_caller_authenticated : () -> (bool) query;
  is_principal_trusted : (principal) -> (bool) query;
  is_valid_ii_principal : (principal) -> (bool) query;
  register_user : (Account, opt blob) -> (Result_1);
  remove_trusted_principal : (principal) -> (Result);
  set_admin_bypass : (bool) -> (Result);
  set_transfer_fee : (nat) -> (Result);
}
